/**  XML Manager* - loads an external XML file and returns an array of stacks of video objects* */package com.etanercept.lal.datastorage {	import flash.events.EventDispatcher;	import com.baseclasses.events.CustomEvent;	import com.baseclasses.dataLoader.XMLReader;	import com.etanercept.lal.datastorage.*;	public class XMLManager extends EventDispatcher 	{		private var xmlReader:XMLReader;		public var allStacks_arr:Array = new Array();		public var cue_arr:Array = new Array();		public var stacks_arr:Array = new Array();		public var actualImage_cnt:int=0;		public var _storage_arr:Array = new Array();				public function XMLManager():void		{			super();		}			public function init(xmlFileName:String):void		{			//instantiate the reader		 	xmlReader = new XMLReader(xmlFileName);		  	xmlReader.addEventListener("dataLoaded", dataComplete);			}			private function dataComplete(e:CustomEvent)		{			var xml:XML = XML(e.evtObj.data);			var stackCnt:uint=0;			var vidCnt:uint=0;					//seperate stacks			for each(var node:XML in xml.CuePoints.stack)			{				stacks_arr.push(node);			}					var bigTmp_arr:Array=new Array;			//builds a 2d array like [stack][video]			for(var i:uint=0;i<stacks_arr.length;i++)				{				var videoCnt:int=0;				var tmp_arr:Array=new Array;				for each(var snode:XML in stacks_arr[i].videoClip)				{					tmp_arr.push(snode.(@id==videoCnt));					videoCnt++;				}				bigTmp_arr.push(tmp_arr);				tmp_arr=null;			}						//creates allStacks array which contains [stacks][an array of videoObject each containing an array of cue objects]			for(var a:uint=0;a<stacks_arr.length;a++)				{				var tmpVid_arr:Array = new Array;							for(var b:uint=0;b<bigTmp_arr[a].length;b++)				{					var tmpCue_arr:Array = new Array;								 	for each(var dnode:XML in bigTmp_arr[a][b].cuepoint)					{						var c:CueObject = new CueObject(dnode);						tmpCue_arr.push(c);						c=null;					}					var v:VideoObject = new VideoObject(bigTmp_arr[a][b].@flvPath , tmpCue_arr);					tmpVid_arr.push(v);					tmpCue_arr=null;				}								allStacks_arr[a]= tmpVid_arr;			}						/*			var tmpVideoNum:int=1;			trace(" \n _allStacks_arr[0][0].getPath" + allStacks_arr[0][tmpVideoNum].getFlvPath());			trace(" \n _allStacks_arr[0][0]" + allStacks_arr[0][tmpVideoNum].getCuesArray());			trace(" \n _allStacks_arr[0][0]getImageCnt(): " + allStacks_arr[0][tmpVideoNum].getImageTotal());			trace(" \n _allStacks_arr[0][0]getImageArray(): " + allStacks_arr[0][tmpVideoNum].getImageArray());			trace(" \n _allStacks_arr[0][0]getCueTimesArray(): " + allStacks_arr[0][tmpVideoNum].getCueTimesArray());			trace(" \n _allStacks_arr[0][0]getCueTypesArray(): " + allStacks_arr[0][tmpVideoNum].getCueTypesArray());			trace(" \n _allStacks_arr[0][0]getTextArray(): " + allStacks_arr[0][tmpVideoNum].getTextArray());			*/						//dipatch dataArrayLoaded after iteration is complete			dispatchEvent(new CustomEvent("dataArrayLoaded", {xml:e.evtObj.data}));			bigTmp_arr=null;			tmp_arr=null;			xml=null;	    }	}}